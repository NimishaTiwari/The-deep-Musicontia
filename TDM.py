import numpy as np
import os
import glob
import pickle
from music21 import converter, instrument, stream, note, chord
# Run version 2.1.6
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM, Activation, Bidirectional, Flatten
from keras import utils
from keras.callbacks import ModelCheckpoint
from keras_self_attention import SeqSelfAttention
from tkinter import *
from tkinter.ttk import *
os.environ['KMP_WARNINGS'] = 'off'


def generate(st):
    """ Generate a piano midi file """
    # load the notes used to train the model
    nd = st + '_notes_final'
    print(nd)
    with open('data/'+nd, 'rb') as filepath:
        notes = pickle.load(filepath)

    # Get all pitch names
    pitchnames = sorted(set(item for item in notes))
    # Get all pitch names
    n_vocab = len(set(notes))

    network_input, normalized_input = prepare_sequences_output(notes, pitchnames, n_vocab)
    model = create_network_add_weights(normalized_input, n_vocab, st)
    prediction_output = generate_notes(model, network_input, pitchnames, n_vocab)
    create_midi(prediction_output,st)


def prepare_sequences_output(notes, pitchnames, n_vocab):
    """ Prepare the sequences used by the Neural Network """
    # map between notes and integers and back
    note_to_int = dict((note, number) for number, note in enumerate(pitchnames))

    sequence_length = 100
    network_input = []
    output = []
    for i in range(0, len(notes) - sequence_length, 1):
        sequence_in = notes[i:i + sequence_length]
        sequence_out = notes[i + sequence_length]
        network_input.append([note_to_int[char] for char in sequence_in])
        output.append(note_to_int[sequence_out])

    n_patterns = len(network_input)

    # reshape the input into a format compatible with LSTM layers
    normalized_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
    # normalize input
    normalized_input = normalized_input / float(n_vocab)

    return (network_input, normalized_input)


def create_network_add_weights(network_input, n_vocab, wd):
    """ create the structure of the neural network """
    model = Sequential()

    model.add(Bidirectional(LSTM(512, return_sequences=True), input_shape=(network_input.shape[1], network_input.shape[
        2])))  # n_time_steps, n_features? Needed input_shape in first layer, which is Bid not LSTM
    model.add(SeqSelfAttention(attention_activation='sigmoid'))
    model.add(Dropout(0.3))

    model.add(LSTM(512, return_sequences=True))
    model.add(Dropout(0.3))

    model.add(Flatten())  # Supposedly needed to fix stuff before dense layer
    model.add(Dense(n_vocab))
    model.add(Activation('softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='rmsprop')

    wd = wd + '-weights.hdf5'
    print(wd)
    # Load the weights to each node
    model.load_weights(wd)
    return model


def generate_notes(model, network_input, pitchnames, n_vocab):
    """ Generate notes from the neural network based on a sequence of notes """
    # pick a random sequence from the input as a starting point for the prediction
    start = np.random.randint(0, len(network_input) - 1)

    int_to_note = dict((number, note) for number, note in enumerate(pitchnames))

    pattern = network_input[start]
    prediction_output = []

    # generate 500 notes
    for note_index in range(500):
        prediction_input = np.reshape(pattern, (1, len(pattern), 1))
        prediction_input = prediction_input / float(n_vocab)

        prediction = model.predict(prediction_input, verbose=0)

        index = np.argmax(prediction)
        result = int_to_note[index]
        prediction_output.append(result)

        pattern.append(index)
        pattern = pattern[1:len(pattern)]

    return prediction_output


def create_midi(prediction_output,st):
    """ convert the output from the prediction to notes and create a midi file
        from the notes """
    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in prediction_output:
        pattern = pattern.split()
        temp = pattern[0]
        duration = pattern[1]
        pattern = temp
        # pattern is a chord
        if ('.' in pattern) or pattern.isdigit():
            notes_in_chord = pattern.split('.')
            notes = []
            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note))
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)
            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)
        # pattern is a rest
        elif ('rest' in pattern):
            new_rest = note.Rest(pattern)
            new_rest.offset = offset
            new_rest.storedInstrument = instrument.Piano()  # ???
            output_notes.append(new_rest)
        # pattern is a note
        else:
            new_note = note.Note(pattern)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)
        # increase offset each iteration so that notes do not stack
        offset += convert_to_float(duration)

    midi_stream = stream.Stream(output_notes)

    name_midi_op =st + '.mid'
    midi_stream.write('midi', fp=name_midi_op)

# From: https://stackoverflow.com/questions/1806278/convert-fraction-to-float
def convert_to_float(frac_str):
    try:
        return float(frac_str)
    except ValueError:
        num, denom = frac_str.split('/')
        try:
            leading, num = num.split(' ')
            whole = float(leading)
        except ValueError:
            whole = 0
        frac = float(num) / float(denom)
        return whole - frac if whole < 0 else whole + frac

def popup():
    pop = Tk()
    pop.geometry('200x100')
    pop.resizable(0,0)
    pop.wm_title("Complete")
    label = Label(pop, text='Music generated')
    label.pack(side="top", fill="x", pady=10)
    B1 = Button(pop, text="Okay", command=pop.destroy)
    B1.pack()
    pop.mainloop()
def cgen():
    generate('classical')
    print('completed')
    popup()

def jgen():
    generate('jazz')
    print('completed')
    popup()

def hgen():
    generate('hiphop')
    print('completed')
    popup()


window = Tk()
window.title("The Deep Musicontia")
window.geometry('400x540')
window.resizable(0,0)

#Setting background image
C = Canvas(window, bg="blue", height=250, width=300)
filename = PhotoImage(file = "bg-Image2.png")
background_label = Label(window, image=filename)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

img = PhotoImage(file='output-onlinepngtools.png')

#adding a label
lbl = Label(window, image=img).pack(side="top")

frame = Frame(window)

tlbl = Label(window, text="Generate Music from given genre:", font = ('Verdana',15)).pack()

cimg = PhotoImage(file='images.png')
classicbutton = Button(frame,text="Classical", image=cimg , compound = BOTTOM, command= cgen)
classicbutton.pack()

jimg = PhotoImage(file='jazz (1).png')
jazzbutton = Button(frame, text="Jazz", image=jimg , compound = BOTTOM, command= jgen)
jazzbutton.pack()

himg = PhotoImage(file='hiphop.png')
hhbutton = Button(frame, text="Hip Hop", image=himg , compound = BOTTOM, command= hgen)
hhbutton.pack()

frame.pack(anchor='center')
C.pack()
window.mainloop()